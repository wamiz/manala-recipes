{{- $has_mariadb := .Vars.system.mariadb.version -}}
{{- $has_redis := .Vars.system.redis.version -}}
{{- $has_mailcatcher := .Vars.system.mailcatcher.version -}}
{{- $has_meilisearch := .Vars.system.meilisearch.version -}}

# Relative root dir ("."|".."|"../.."|…)
_ROOT_DIR := $(patsubst ./%,%,$(patsubst %/.manala/Makefile,%,./$(filter %.manala/Makefile,$(MAKEFILE_LIST))))
# Is current dir root ? (""|"1")
_ROOT := $(if $(filter .,$(_ROOT_DIR)),1)
# Relative current dir ("."|"foo"|"foo/bar"|…)
_DIR := $(patsubst ./%,%,.$(patsubst $(realpath $(CURDIR)/$(_ROOT_DIR))%,%,$(CURDIR)))

include $(_ROOT_DIR)/.manala/make/text.mk
include $(_ROOT_DIR)/.manala/make/help.mk
include $(_ROOT_DIR)/.manala/make/os.mk
include $(_ROOT_DIR)/.manala/make/git.mk

.DEFAULT_GOAL := help

user := $(shell id -u)
group := $(shell id -g)

dc := USER_ID=$(user) GROUP_ID=$(group) $(shell docker compose --env-file /dev/null > /dev/null 2>&1 && echo 'docker compose --env-file /dev/null' || echo 'docker-compose --env-file /dev/null')
symfony := symfony
php := $(symfony) php
composer := $(symfony) composer

APP_NAME := {{ .Vars.system.app_name }}
APP_DOMAINS := $(APP_NAME)
MANDATORY_CONTAINERS := {{- if $has_mariadb }} database{{ end }}
                        {{- if $has_redis }} redis{{ end }}
                        {{- if $has_mailcatcher }} mailcatcher{{ end }}
                        {{- if $has_meilisearch }} meilisearch{{ end }}
USE_DOCKER = {{ if or ($has_mariadb) ($has_redis) ($has_mailcatcher) ($has_meilisearch) }}true{{ else }}false{{ end }}

HELP += $(call help_section, Environment)

HELP += $(call help,install,             Install the environment)
install:
	$(symfony) server:ca:install
	$(symfony) proxy:start
	echo $(APP_DOMAINS) | xargs $(symfony) proxy:domain:attach

	$(MAKE) up
	$(install)
	@echo
	@$(call message_success, The environment has been successfully installed.)
	@echo

HELP += $(call help,install@integration, Install the environment (in integration environment))
install@integration:
	$(symfony) server:ca:install
	$(MAKE) up
	$(install_integration)
	@echo
	@$(call message_success, The integration environment has been successfully installed.)
	@echo

_symfony_proxy_start:
	$(symfony) proxy:start

_up:
	@if [ "$(USE_DOCKER)" = "true" ]; then \
		$(dc) up --wait --detach $(MANDATORY_CONTAINERS); \
	else \
		$(call message_warning, Skipping creating and starting Docker containers...); \
	fi

_start:
	@if [ "$(USE_DOCKER)" = "true" ]; then \
		$(dc) start $(MANDATORY_CONTAINERS); \
	else \
		$(call message_warning, Skipping starting Docker services...); \
	fi

_post_start_success:
	@echo
	@$(call message_success, You can now run the Symfony server with \"symfony serve\" command.)
	@echo

HELP += $(call help,up,                  Start the environment)
up: _symfony_proxy_start _up _post_start_success

HELP += $(call help,start,               Alias for \"up\")
start: up

HELP += $(call help,stop,                Stop the environment)
stop:
	@if [ "$(USE_DOCKER)" = "true" ]; then \
		$(dc) stop; \
	else \
		$(call message_warning, Skipping stopping Docker services...); \
	fi

HELP += $(call help,down,                Stop and remove the environment)
down: stop
	@if [ "$(USE_DOCKER)" = "true" ]; then \
		$(dc) down --volumes; \
		echo ''; \
		$(call message_error, ALL CONTAINERS HAVE BEEN DESTROYED); \
		echo ''; \
	else \
	    $(call message_warning, Skipping stopping and removing Docker services...); \
	fi

HELP += $(call help_section, Development tools)

{{ if $has_mariadb -}}
HELP += $(call help,run-phpmyadmin,    Start a web interface for PhpMyAdmin)
run-phpmyadmin:
	@if [ "$(USE_DOCKER)" = "false" ]; then \
		$(call message_error, This command does not works if Docker support is disabled (through USE_DOCKER variable)); \
		exit 1; \
	fi

	$(dc) up --detach phpmyadmin
	@echo
	@$(call message_success, You can now open http://`$(dc) port phpmyadmin 80` to access PhpMyAdmin)
	@echo
{{- end }}

{{ if $has_redis -}}
HELP += $(call help,run-phpredisadmin, Start a web interface for PhpRedisAdmin)
run-phpredisadmin:
	@if [ "$(USE_DOCKER)" = "false" ]; then \
		$(call message_error, This command does not works if Docker support is disabled (through USE_DOCKER variable)); \
		exit 1; \
	fi

	$(dc) up --detach phpredisadmin
	@echo
	@$(call message_success, You can now open http://`$(dc) port phpredisadmin 80` to access PhpRedisAdmin)
	@echo{{- end }}

{{ if $has_mailcatcher -}}
HELP += $(call help,open-mailcatcher,  Open the web interface for MailCatcher)
open-mailcatcher:
	$(symfony) open:local:webmail
{{- end }}
